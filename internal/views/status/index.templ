package status

import (
	"fmt"
	"movie-matcher/internal/applicant"
	"movie-matcher/internal/data"
	"movie-matcher/internal/server/ctxt"
	"movie-matcher/internal/views/layouts"
	"movie-matcher/internal/views/types"
	"strconv"
)

type Params[T types.Number] struct {
	Timeseries   []types.TimePoint[T]
	Name         applicant.Name
	CurrentLimit int
	Email        applicant.NUEmail
}

templ Index[T types.Number](params Params[T]) {
	@layouts.Base(true) {
		<div id="status-container" class="flex justify-center items-center h-full w-full">
			@Chart(params.Timeseries, params.Name, params.CurrentLimit)
		</div>
	}
}

templ Chart[T types.Number](timeseries []types.TimePoint[T], name applicant.Name, currentLimit int) {
	<div class="px-12 py-10 bg-gray-400 rounded-xl backdrop-filter backdrop-blur-sm bg-opacity-10 border border-gray-400 flex flex-col gap-4 p-6 max-w-[90%]">
		@ChartHeader(name, currentLimit)
		<div id="area-chart"></div>
		@ChartFooter(currentLimit)
	</div>
	<data id="data" value={ templ.JSONString(data.Into(timeseries)) }></data>
	<data id="token" value={ templ.JSONString(ctxt.GetEmail(ctx)) }></data>
	<data id="currentLimit" value={ templ.JSONString(currentLimit) }></data>
	<script src="/deps/flowbite.min.js"></script>
	<script src="/deps/apexcharts.min.js"></script>
	@ApexChartScript()
	@Poller()
}

templ ChartHeader(name applicant.Name, currentLimit int) {
	<div>
		@ChartTooltip()
		<h2 class="leading-none text-3xl font-bold dark:text-white pb-2">{ name.String() }'s Submissions</h2>
		<div>
			How to <span data-tooltip-target="tooltip-chart" class="text-[#187dff] cursor-default">interpret the score? </span>
		</div>
	</div>
}

templ ChartFooter(currentLimit int) {
	<div class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between">
		<div class="flex justify-between items-center pt-5">
			@DropdownButton(currentLimit)
			@DropdownMenu(currentLimit)
		</div>
	</div>
}

templ ChartTooltip() {
	<div id="tooltip-chart" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
		Submissions are scored based on <span class="text-[#ffbf3c]">how close the ranking matches our internal solution</span>. Higher scores are better, and a 100 is perfect, but remember, <span class="text-[#ffbf3c]">score is not the only factor we evaluate</span>.
		<div class="tooltip-arrow" data-popper-arrow></div>
	</div>
}

templ DropdownButton(currentLimit int) {
	<button
		id="dropdownDefaultButton"
		data-dropdown-toggle="lastSubmissionsdropdown"
		data-dropdown-placement="bottom"
		class="text-sm font-medium text-center inline-flex items-center"
		type="button"
	>
		Last { strconv.Itoa(currentLimit) } Submissions
		<svg class="w-2.5 m-2.5 ms-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
			<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path>
		</svg>
	</button>
}

templ DropdownMenu(currentLimit int) {
	<div id="lastSubmissionsdropdown" class="z-10 hidden bg-gray-900 rounded-xl backdrop-filter backdrop-blur-md border border-gray-400">
		<ul class="py-2 text-sm" aria-labelledby="dropdownDefaultButton">
			for _, n := range []int{5, 10, 25, 50, 100} {
				if n != currentLimit {
					@DropdownItem(n)
				} else {
					@DisabledDropdownItem(n)
				}
			}
		</ul>
	</div>
}

templ DropdownItem(n int) {
	<li>
		<a
			hx-on:click={ templ.ComponentScript{
								Call:fmt.Sprintf(
									`fetch('/chart?email=%s&limit=%d')
										.then(response => response.json())
										.then(data => {
											window.chart.updateSeries([{ data: data }]);
											document.getElementById('dropdownDefaultButton').textContent = 'Last %d Submissions';
										})
										.catch(error => console.error('Error:', error));`,
									ctxt.GetEmail(ctx), n, n) } }
			class="block px-4 py-2 hover:bg-gray-500 dark:hover:bg-gray-500 dark:hover:text-white cursor-pointer transition-all ease-in-out"
		>
			Last { strconv.Itoa(n) } Submissions
		</a>
	</li>
}

templ DisabledDropdownItem(n int) {
	<li>
		<a
			hx-on:click={ templ.ComponentScript{
								Call:fmt.Sprintf(
									`fetch('/chart?email=%s&limit=%d')
										.then(response => response.json())
										.then(data => {
											window.chart.updateSeries([{ data: data }]);
											document.getElementById('dropdownDefaultButton').textContent = 'Last %d Submissions';
                						})
										.catch(error => console.error('Error:', error));`,
									ctxt.GetEmail(ctx), n, n) } }
			class="block px-4 py-2 hover:bg-gray-500 dark:hover:bg-gray-500 dark:hover:text-white cursor-pointer transition-all ease-in-out"
			disabled
		>
			Last { strconv.Itoa(n) } Submissions
		</a>
	</li>
}

templ ApexChartScript() {
	<script type="text/javascript">
		if (document.getElementById("area-chart") && typeof ApexCharts !== 'undefined') {
			window.chart = new ApexCharts(document.getElementById("area-chart"), {
				chart: {
					height: "100%",
					maxWidth: "100%",
					type: "area",
					fontFamily: "Inter, sans-serif",
					dropShadow: {
						enabled: false,
					},
					toolbar: {
						show: false,
					},
				},
				tooltip: {
					enabled: true,
					x: {
						show: false,
					},
				},
				fill: {
					type: "gradient",
					gradient: {
						opacityFrom: 0.55,
						opacityTo: 0,
						shade: "#1C64F2",
						gradientToColors: ["#1C64F2"],
					},
				},
				dataLabels: {
					enabled: false,
				},
				stroke: {
					width: 6,
				},
				grid: {
					show: false,
					strokeDashArray: 4,
					padding: {
						left: 2,
						right: 2,
						top: 0
					},
				},
				series: [{
					name: 'Score',
					data: JSON.parse(document.getElementById('data').value),
					color: "#1A56DB",
				}],
				xaxis: {
					labels: {
						show: false,
					},
					axisBorder: {
						show: false,
					},
					axisTicks: {
						show: false,
					},
					type: "datetime",
				},
				yaxis: {
					show: false,
				},
			});
			window.chart.render();
		}
	</script>
}

templ Poller() {
	<script type="text/javascript">
		let intervalId;
		let timeoutId;
		const pollingInterval = 10000; // 10 seconds
		const inactivityLimit = 60000; // 1 minute

		function startPolling() {
			if (!intervalId) {
				intervalId = setInterval(function() {
					htmx.ajax('GET', `/chart?email=${JSON.parse(document.getElementById('email').value)}&limit=${JSON.parse(document.getElementById('currentLimit').value)}`, {
						swap: 'none',
						onAfterSwap: function() {
							window.chart.updateSeries([{ data: JSON.parse(document.getElementById('data').value) }]);
						}
					});
				}, pollingInterval);
			}
		}

		function stopPolling() {
			if (intervalId) {
				clearInterval(intervalId);
				intervalId = null;
			}
		}

		function resetInactivityTimer() {
			if (timeoutId) {
				clearTimeout(timeoutId);
			}
			timeoutId = setTimeout(stopPolling, inactivityLimit);
			startPolling();
		}

		document.addEventListener('visibilitychange', function() {
			if (document.hidden) {
				stopPolling();
			} else {
				startPolling();
				resetInactivityTimer();
			}
		});

		document.addEventListener('mousemove', resetInactivityTimer);
		document.addEventListener('keydown', resetInactivityTimer);
		document.addEventListener('scroll', resetInactivityTimer);
		document.addEventListener('click', resetInactivityTimer);

		startPolling();
		resetInactivityTimer();
	</script>
}
